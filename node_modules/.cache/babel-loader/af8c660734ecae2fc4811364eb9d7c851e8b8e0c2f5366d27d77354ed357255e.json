{"ast":null,"code":"var _jsxFileName = \"/Users/mahammadsuelc/Desktop/automation/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './App.css';\n// import { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as XLSX from 'xlsx';\nimport moment from \"moment/moment\";\nimport upload from './Assets/upload.png';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [fromDate, setFromDate] = useState(new Date());\n  const [toDate, setToDate] = useState(new Date());\n  const [excelData, setExcelData] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [showExportButton, setShowExportButton] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [completedFiles, setcompletedFiles] = useState(null);\n  const [totalFiles, setTotalFiles] = useState(0);\n  const handleFileSelect = async e => {\n    const files = e.target.files;\n    setTotalFiles(files.length);\n    if (files && files.length > 0) {\n      setShowExportButton(false);\n      setShowLoader(true);\n      const convertedDataArray = [];\n      setExcelData([]);\n      for (let i = 0; i <= files.length; i++) {\n        // console.log(\"pregresss\",(i/files.length)*100 );\n        setProgress(`${(i / files.length * 100).toFixed()}%`);\n        setcompletedFiles(i);\n        const file = files[i];\n        try {\n          const data = await readFileAsync(file);\n          const workbook = XLSX.read(data, {\n            type: 'binary',\n            cellDates: true\n          });\n\n          // Assuming you want to convert the first sheet to JSON\n          const sheetName = workbook.SheetNames;\n          await sheetName.forEach(async sheetName => {\n            if (sheetName === \"TOTAL\") {\n              // console.log(\"sheetName==>jhjkghsjhG\", sheetName);\n              const sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n                // raw: false, // Interpret dates as JavaScript dates\n                // dateNF: new Date(), // Format for parsing dates (adjust as needed)\n              });\n              const data1 = [];\n              const startDateOld = new Date(moment(fromDate).format('yyyy-MM-DD')); // October 1, 2023\n              const endDate = new Date(moment(toDate).format('yyyy-MM-DD'));\n              const oneDayMilliseconds = 24 * 60 * 60 * 1000; // 24 hours * 60 minutes * 60 seconds * 1000 milliseconds\n              const startDate = new Date(startDateOld - oneDayMilliseconds);\n\n              // console.log(\"sheetData==>\", typeof(startDate), endDate, sd);\n              await sheetData.map(async val => {\n                if (val !== null && val !== void 0 && val.Date && (val === null || val === void 0 ? void 0 : val.Date) !== \"Total\" && val[\" Adjusted Billable Spend \"] && val[\" Adjusted Profit \"]) {\n                  const itemDateParts = moment((val === null || val === void 0 ? void 0 : val.Date) + oneDayMilliseconds).format(\"DD-MMM\").split('-');\n                  const itemYear = new Date(val === null || val === void 0 ? void 0 : val.Date).getFullYear();\n                  const itemMonth = itemDateParts[1].toLowerCase(); // Convert to lowercase for consistency\n                  const itemDay = parseInt(itemDateParts[0]);\n                  const itemJavaScriptDate = new Date(`2023-${itemMonth}-${itemDay}`);\n                  // console.log(\"itemJavaScriptDate\", itemJavaScriptDate, startDate);\n                  console.log(\"itemJavaScriptDate\", itemYear, itemDateParts, `2023-${itemMonth}-${itemDay}`);\n                  if (itemJavaScriptDate >= startDate && itemJavaScriptDate <= endDate) {\n                    console.log(\"itemJavaScriptDate\", itemYear);\n                    const finelData = {\n                      \"Spend Sheet Name\": file === null || file === void 0 ? void 0 : file.name,\n                      \"Date\": val === null || val === void 0 ? void 0 : val.Date,\n                      \"Adjusted Billable Spend\": val[\" Adjusted Billable Spend \"],\n                      \"Adjusted Profit\": val[\" Adjusted Profit \"]\n                    };\n                    // console.log(\"sasasasas\", finelData);\n                    data1.push(finelData);\n                    // return finelData\n                  }\n                }\n              });\n              // console.log('Converted Excel data ===>:', data1);\n              const newData = await data1.filter(item => {\n                if (item !== undefined) {\n                  return item;\n                }\n              });\n              // console.log(\"DDFLJKDJKDJ ===>\", newData);\n              convertedDataArray.push(data1);\n            }\n          });\n          // Store the converted JSON data in an array\n        } catch (error) {\n          console.error(`Error converting Excel file ${file === null || file === void 0 ? void 0 : file.name} to JSON:`, error);\n        }\n      }\n\n      // Set the array of converted JSON data in state\n      console.log(\"convertedDataArray===>\", [].concat(...convertedDataArray));\n      setExcelData([].concat(...convertedDataArray));\n      setShowExportButton(true);\n      setShowLoader(false);\n    }\n  };\n  const readFileAsync = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        resolve(event.target.result);\n      };\n      reader.onerror = event => {\n        reject(event.target.error);\n      };\n      reader.readAsBinaryString(file);\n    });\n  };\n  const handleExportExcel = () => {\n    const dd = [].concat(...excelData);\n    const worksheet = XLSX.utils.json_to_sheet(dd);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n    XLSX.writeFile(workbook, \"DataSheet.xlsx\", {\n      type: 'binary',\n      bookType: 'xlsx',\n      cellDates: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"datePickerView\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fromData\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"From Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          className: \"datePicker\",\n          selected: fromDate,\n          onChange: date => setFromDate(date)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toDate\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"To Date \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          className: \"datePicker\",\n          selected: toDate,\n          onChange: date => setToDate(date)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Click box to upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: upload,\n        alt: \"upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"excelFileInput\",\n        accept: \".xlsx, .xls\" // Specify accepted file types (Excel formats)\n        ,\n        multiple: true // Allow multiple file selection\n        ,\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), excelData.length > 1 && showExportButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exportButton\",\n      onClick: handleExportExcel,\n      title: \"Export\",\n      children: \"Export\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 52\n    }, this), showExportButton && excelData.length <= 1 && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No Data found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), completedFiles && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progressView\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: `Total files processed ${completedFiles}/${totalFiles}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LtNFgcm4AQr3tT+U535PksjByBM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DatePicker","XLSX","moment","upload","LoadingSpinner","jsxDEV","_jsxDEV","App","_s","fromDate","setFromDate","Date","toDate","setToDate","excelData","setExcelData","progress","setProgress","showExportButton","setShowExportButton","showLoader","setShowLoader","completedFiles","setcompletedFiles","totalFiles","setTotalFiles","handleFileSelect","e","files","target","length","convertedDataArray","i","toFixed","file","data","readFileAsync","workbook","read","type","cellDates","sheetName","SheetNames","forEach","sheetData","utils","sheet_to_json","Sheets","data1","startDateOld","format","endDate","oneDayMilliseconds","startDate","map","val","itemDateParts","split","itemYear","getFullYear","itemMonth","toLowerCase","itemDay","parseInt","itemJavaScriptDate","console","log","finelData","name","push","newData","filter","item","undefined","error","concat","Promise","resolve","reject","reader","FileReader","onload","event","result","onerror","readAsBinaryString","handleExportExcel","dd","worksheet","json_to_sheet","book_new","book_append_sheet","writeFile","bookType","className","children","fileName","_jsxFileName","lineNumber","columnNumber","selected","onChange","date","src","alt","id","accept","multiple","onClick","title","_c","$RefreshReg$"],"sources":["/Users/mahammadsuelc/Desktop/automation/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './App.css'\n// import { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as XLSX from 'xlsx'\nimport moment from \"moment/moment\";\nimport upload from './Assets/upload.png'\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nconst App = () => {\n  const [fromDate, setFromDate] = useState(new Date());\n  const [toDate, setToDate] = useState(new Date());\n  const [excelData, setExcelData] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [showExportButton, setShowExportButton] = useState(false)\n  const [showLoader, setShowLoader] = useState(false)\n  const [completedFiles, setcompletedFiles] = useState(null)\n  const [totalFiles, setTotalFiles] = useState(0)\n\n\n  const handleFileSelect = async (e) => {\n    const files = e.target.files;\n    setTotalFiles(files.length)\n    if (files && files.length > 0) {\n      setShowExportButton(false)\n      setShowLoader(true)\n      const convertedDataArray = [];\n      setExcelData([])\n      for (let i = 0; i <= files.length; i++) {\n        // console.log(\"pregresss\",(i/files.length)*100 );\n        setProgress(`${((i / files.length) * 100).toFixed()}%`)\n        setcompletedFiles(i)\n        const file = files[i];\n        try {\n          const data = await readFileAsync(file);\n          const workbook = XLSX.read(data, { type: 'binary', cellDates:true });\n\n          // Assuming you want to convert the first sheet to JSON\n          const sheetName = workbook.SheetNames;\n          await sheetName.forEach(async (sheetName) => {\n            if (sheetName === \"TOTAL\") {\n              // console.log(\"sheetName==>jhjkghsjhG\", sheetName);\n              const sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n                // raw: false, // Interpret dates as JavaScript dates\n                // dateNF: new Date(), // Format for parsing dates (adjust as needed)\n              });\n\n              const data1 = []\n              const startDateOld = new Date(moment(fromDate).format('yyyy-MM-DD')); // October 1, 2023\n              const endDate = new Date(moment(toDate).format('yyyy-MM-DD'));\n\n              const oneDayMilliseconds = 24 * 60 * 60 * 1000; // 24 hours * 60 minutes * 60 seconds * 1000 milliseconds\n              const startDate = new Date(startDateOld - oneDayMilliseconds);\n\n              // console.log(\"sheetData==>\", typeof(startDate), endDate, sd);\n              await sheetData.map(async (val) => {\n                if (val?.Date && val?.Date !== \"Total\" && val[\" Adjusted Billable Spend \"] && val[\" Adjusted Profit \"]) {\n                  const itemDateParts = moment(val?.Date + oneDayMilliseconds).format(\"DD-MMM\").split('-');\n                  const itemYear = new Date(val?.Date).getFullYear() \n                  const itemMonth = itemDateParts[1].toLowerCase(); // Convert to lowercase for consistency\n                  const itemDay = parseInt(itemDateParts[0]);\n\n                  const itemJavaScriptDate = new Date(`2023-${itemMonth}-${itemDay}`);\n                  // console.log(\"itemJavaScriptDate\", itemJavaScriptDate, startDate);\n                  console.log(\"itemJavaScriptDate\", itemYear, itemDateParts, `2023-${itemMonth}-${itemDay}`);\n                  if (itemJavaScriptDate >= startDate && itemJavaScriptDate <= endDate) {\n                    console.log(\"itemJavaScriptDate\", itemYear);\n                    const finelData = {\n                      \"Spend Sheet Name\": file?.name,\n                      \"Date\": val?.Date,\n                      \"Adjusted Billable Spend\": val[\" Adjusted Billable Spend \"],\n                      \"Adjusted Profit\": val[\" Adjusted Profit \"]\n                    }\n                    // console.log(\"sasasasas\", finelData);\n                    data1.push(finelData)\n                    // return finelData\n                  }\n                }\n              })\n              // console.log('Converted Excel data ===>:', data1);\n              const newData = await data1.filter((item) => {\n                if (item !== undefined) {\n                  return item\n                }\n              })\n              // console.log(\"DDFLJKDJKDJ ===>\", newData);\n              convertedDataArray.push(data1);\n            }\n          })\n          // Store the converted JSON data in an array\n\n        } catch (error) {\n          console.error(`Error converting Excel file ${file?.name} to JSON:`, error);\n        }\n      }\n\n      // Set the array of converted JSON data in state\n      console.log(\"convertedDataArray===>\", [].concat(...convertedDataArray));\n      setExcelData([].concat(...convertedDataArray));\n      setShowExportButton(true)\n      setShowLoader(false)\n    }\n  };\n\n  const readFileAsync = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = (event) => {\n        resolve(event.target.result);\n      };\n\n      reader.onerror = (event) => {\n        reject(event.target.error);\n      };\n\n      reader.readAsBinaryString(file);\n    });\n  };\n\n\n  const handleExportExcel = () => {\n    const dd = [].concat(...excelData)\n    const worksheet = XLSX.utils.json_to_sheet(dd);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n    XLSX.writeFile(workbook, \"DataSheet.xlsx\", { type: 'binary', bookType: 'xlsx', cellDates: true });\n  }\n\n  return (\n    <div className='container'>\n      <div className='datePickerView'>\n        <div className=\"fromData\">\n          <h2>From Date</h2>\n          <DatePicker className=\"datePicker\" selected={fromDate} onChange={(date) => setFromDate(date)} />\n        </div>\n\n        <div className=\"toDate\">\n          <h2>To Date </h2>\n          <DatePicker className=\"datePicker\" selected={toDate} onChange={(date) => setToDate(date)} />\n        </div>\n      </div>\n      <div className=\"file-upload\">\n        <h2>Click box to upload</h2>\n        <img src={upload} alt=\"upload\" />\n        <input\n          type=\"file\"\n          id=\"excelFileInput\"\n          accept=\".xlsx, .xls\" // Specify accepted file types (Excel formats)\n          multiple // Allow multiple file selection\n          onChange={handleFileSelect}\n        />\n      </div>\n\n\n      {excelData.length > 1 && showExportButton && <button\n        className=\"exportButton\"\n        onClick={handleExportExcel}\n        title=\"Export\"\n      >\n        Export\n      </button>\n      }\n      {showExportButton && excelData.length <= 1 &&\n        <h2>\n          No Data found\n        </h2>\n      }\n      {completedFiles &&\n        <div className=\"progressView\">\n          <h3>\n            {`Total files processed ${completedFiles}/${totalFiles}`}\n          </h3>\n          <h1>\n            {progress}\n          </h1>\n        </div>}\n    </div>\n  )\n}\n\nexport default App"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB;AACA,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,4CAA4C;AACnD,OAAO,KAAKC,IAAI,MAAM,MAAM;AAC5B,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAIY,IAAI,CAAC,CAAC,CAAC;EACpD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAIY,IAAI,CAAC,CAAC,CAAC;EAChD,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACmB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EAG/C,MAAM2B,gBAAgB,GAAG,MAAOC,CAAC,IAAK;IACpC,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BH,aAAa,CAACG,KAAK,CAACE,MAAM,CAAC;IAC3B,IAAIF,KAAK,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MAC7BX,mBAAmB,CAAC,KAAK,CAAC;MAC1BE,aAAa,CAAC,IAAI,CAAC;MACnB,MAAMU,kBAAkB,GAAG,EAAE;MAC7BhB,YAAY,CAAC,EAAE,CAAC;MAChB,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,KAAK,CAACE,MAAM,EAAEE,CAAC,EAAE,EAAE;QACtC;QACAf,WAAW,CAAE,GAAE,CAAEe,CAAC,GAAGJ,KAAK,CAACE,MAAM,GAAI,GAAG,EAAEG,OAAO,CAAC,CAAE,GAAE,CAAC;QACvDV,iBAAiB,CAACS,CAAC,CAAC;QACpB,MAAME,IAAI,GAAGN,KAAK,CAACI,CAAC,CAAC;QACrB,IAAI;UACF,MAAMG,IAAI,GAAG,MAAMC,aAAa,CAACF,IAAI,CAAC;UACtC,MAAMG,QAAQ,GAAGpC,IAAI,CAACqC,IAAI,CAACH,IAAI,EAAE;YAAEI,IAAI,EAAE,QAAQ;YAAEC,SAAS,EAAC;UAAK,CAAC,CAAC;;UAEpE;UACA,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,UAAU;UACrC,MAAMD,SAAS,CAACE,OAAO,CAAC,MAAOF,SAAS,IAAK;YAC3C,IAAIA,SAAS,KAAK,OAAO,EAAE;cACzB;cACA,MAAMG,SAAS,GAAG3C,IAAI,CAAC4C,KAAK,CAACC,aAAa,CAACT,QAAQ,CAACU,MAAM,CAACN,SAAS,CAAC,EAAE;gBACrE;gBACA;cAAA,CACD,CAAC;cAEF,MAAMO,KAAK,GAAG,EAAE;cAChB,MAAMC,YAAY,GAAG,IAAItC,IAAI,CAACT,MAAM,CAACO,QAAQ,CAAC,CAACyC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;cACtE,MAAMC,OAAO,GAAG,IAAIxC,IAAI,CAACT,MAAM,CAACU,MAAM,CAAC,CAACsC,MAAM,CAAC,YAAY,CAAC,CAAC;cAE7D,MAAME,kBAAkB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;cAChD,MAAMC,SAAS,GAAG,IAAI1C,IAAI,CAACsC,YAAY,GAAGG,kBAAkB,CAAC;;cAE7D;cACA,MAAMR,SAAS,CAACU,GAAG,CAAC,MAAOC,GAAG,IAAK;gBACjC,IAAIA,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAE5C,IAAI,IAAI,CAAA4C,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE5C,IAAI,MAAK,OAAO,IAAI4C,GAAG,CAAC,2BAA2B,CAAC,IAAIA,GAAG,CAAC,mBAAmB,CAAC,EAAE;kBACtG,MAAMC,aAAa,GAAGtD,MAAM,CAAC,CAAAqD,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE5C,IAAI,IAAGyC,kBAAkB,CAAC,CAACF,MAAM,CAAC,QAAQ,CAAC,CAACO,KAAK,CAAC,GAAG,CAAC;kBACxF,MAAMC,QAAQ,GAAG,IAAI/C,IAAI,CAAC4C,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE5C,IAAI,CAAC,CAACgD,WAAW,CAAC,CAAC;kBAClD,MAAMC,SAAS,GAAGJ,aAAa,CAAC,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC,CAAC,CAAC;kBAClD,MAAMC,OAAO,GAAGC,QAAQ,CAACP,aAAa,CAAC,CAAC,CAAC,CAAC;kBAE1C,MAAMQ,kBAAkB,GAAG,IAAIrD,IAAI,CAAE,QAAOiD,SAAU,IAAGE,OAAQ,EAAC,CAAC;kBACnE;kBACAG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAER,QAAQ,EAAEF,aAAa,EAAG,QAAOI,SAAU,IAAGE,OAAQ,EAAC,CAAC;kBAC1F,IAAIE,kBAAkB,IAAIX,SAAS,IAAIW,kBAAkB,IAAIb,OAAO,EAAE;oBACpEc,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAER,QAAQ,CAAC;oBAC3C,MAAMS,SAAS,GAAG;sBAChB,kBAAkB,EAAEjC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkC,IAAI;sBAC9B,MAAM,EAAEb,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE5C,IAAI;sBACjB,yBAAyB,EAAE4C,GAAG,CAAC,2BAA2B,CAAC;sBAC3D,iBAAiB,EAAEA,GAAG,CAAC,mBAAmB;oBAC5C,CAAC;oBACD;oBACAP,KAAK,CAACqB,IAAI,CAACF,SAAS,CAAC;oBACrB;kBACF;gBACF;cACF,CAAC,CAAC;cACF;cACA,MAAMG,OAAO,GAAG,MAAMtB,KAAK,CAACuB,MAAM,CAAEC,IAAI,IAAK;gBAC3C,IAAIA,IAAI,KAAKC,SAAS,EAAE;kBACtB,OAAOD,IAAI;gBACb;cACF,CAAC,CAAC;cACF;cACAzC,kBAAkB,CAACsC,IAAI,CAACrB,KAAK,CAAC;YAChC;UACF,CAAC,CAAC;UACF;QAEF,CAAC,CAAC,OAAO0B,KAAK,EAAE;UACdT,OAAO,CAACS,KAAK,CAAE,+BAA8BxC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkC,IAAK,WAAU,EAAEM,KAAK,CAAC;QAC5E;MACF;;MAEA;MACAT,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE,EAAE,CAACS,MAAM,CAAC,GAAG5C,kBAAkB,CAAC,CAAC;MACvEhB,YAAY,CAAC,EAAE,CAAC4D,MAAM,CAAC,GAAG5C,kBAAkB,CAAC,CAAC;MAC9CZ,mBAAmB,CAAC,IAAI,CAAC;MACzBE,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,MAAMe,aAAa,GAAIF,IAAI,IAAK;IAC9B,OAAO,IAAI0C,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAE/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;QACzBL,OAAO,CAACK,KAAK,CAACrD,MAAM,CAACsD,MAAM,CAAC;MAC9B,CAAC;MAEDJ,MAAM,CAACK,OAAO,GAAIF,KAAK,IAAK;QAC1BJ,MAAM,CAACI,KAAK,CAACrD,MAAM,CAAC6C,KAAK,CAAC;MAC5B,CAAC;MAEDK,MAAM,CAACM,kBAAkB,CAACnD,IAAI,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC;EAGD,MAAMoD,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,EAAE,GAAG,EAAE,CAACZ,MAAM,CAAC,GAAG7D,SAAS,CAAC;IAClC,MAAM0E,SAAS,GAAGvF,IAAI,CAAC4C,KAAK,CAAC4C,aAAa,CAACF,EAAE,CAAC;IAC9C,MAAMlD,QAAQ,GAAGpC,IAAI,CAAC4C,KAAK,CAAC6C,QAAQ,CAAC,CAAC;IACtCzF,IAAI,CAAC4C,KAAK,CAAC8C,iBAAiB,CAACtD,QAAQ,EAAEmD,SAAS,EAAE,QAAQ,CAAC;IAC3DvF,IAAI,CAAC2F,SAAS,CAACvD,QAAQ,EAAE,gBAAgB,EAAE;MAAEE,IAAI,EAAE,QAAQ;MAAEsD,QAAQ,EAAE,MAAM;MAAErD,SAAS,EAAE;IAAK,CAAC,CAAC;EACnG,CAAC;EAED,oBACElC,OAAA;IAAKwF,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBzF,OAAA;MAAKwF,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BzF,OAAA;QAAKwF,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvBzF,OAAA;UAAAyF,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClB7F,OAAA,CAACN,UAAU;UAAC8F,SAAS,EAAC,YAAY;UAACM,QAAQ,EAAE3F,QAAS;UAAC4F,QAAQ,EAAGC,IAAI,IAAK5F,WAAW,CAAC4F,IAAI;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7F,CAAC,eAEN7F,OAAA;QAAKwF,SAAS,EAAC,QAAQ;QAAAC,QAAA,gBACrBzF,OAAA;UAAAyF,QAAA,EAAI;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjB7F,OAAA,CAACN,UAAU;UAAC8F,SAAS,EAAC,YAAY;UAACM,QAAQ,EAAExF,MAAO;UAACyF,QAAQ,EAAGC,IAAI,IAAKzF,SAAS,CAACyF,IAAI;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN7F,OAAA;MAAKwF,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BzF,OAAA;QAAAyF,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5B7F,OAAA;QAAKiG,GAAG,EAAEpG,MAAO;QAACqG,GAAG,EAAC;MAAQ;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjC7F,OAAA;QACEiC,IAAI,EAAC,MAAM;QACXkE,EAAE,EAAC,gBAAgB;QACnBC,MAAM,EAAC,aAAa,CAAC;QAAA;QACrBC,QAAQ,OAAC;QAAA;QACTN,QAAQ,EAAE3E;MAAiB;QAAAsE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAGLrF,SAAS,CAACgB,MAAM,GAAG,CAAC,IAAIZ,gBAAgB,iBAAIZ,OAAA;MAC3CwF,SAAS,EAAC,cAAc;MACxBc,OAAO,EAAEtB,iBAAkB;MAC3BuB,KAAK,EAAC,QAAQ;MAAAd,QAAA,EACf;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAERjF,gBAAgB,IAAIJ,SAAS,CAACgB,MAAM,IAAI,CAAC,iBACxCxB,OAAA;MAAAyF,QAAA,EAAI;IAEJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEN7E,cAAc,iBACbhB,OAAA;MAAKwF,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BzF,OAAA;QAAAyF,QAAA,EACI,yBAAwBzE,cAAe,IAAGE,UAAW;MAAC;QAAAwE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,eACL7F,OAAA;QAAAyF,QAAA,EACG/E;MAAQ;QAAAgF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAA3F,EAAA,CA1KKD,GAAG;AAAAuG,EAAA,GAAHvG,GAAG;AA4KT,eAAeA,GAAG;AAAA,IAAAuG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}