{"ast":null,"code":"var _jsxFileName = \"/Users/mahammadsuelc/Desktop/automation/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './App.css';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as XLSX from 'xlsx';\nimport moment from \"moment/moment\";\nimport upload from './Assets/upload.png';\nimport { Progress } from \"./components/ProgressBar/Progress\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [fromDate, setFromDate] = useState(new Date());\n  const [toDate, setToDate] = useState(new Date());\n  const [excelData, setExcelData] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [showExportButton, setShowExportButton] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [completedFiles, setcompletedFiles] = useState(null);\n  const [totalFiles, setTotalFiles] = useState(0);\n  const handleFileSelect = async e => {\n    const files = e.target.files;\n    // setting selected file length\n    setTotalFiles(files.length);\n    // checking if seleted files exist or the selected file length should be greater then 0\n    if (files && files.length > 0) {\n      // setting export button false becouse after completion of process only the button should show\n      setShowExportButton(false);\n      // taking empaty arry to push the converted files\n      const convertedDataArray = [];\n      // looping the selcted files\n      for (let i = 0; i <= files.length; i++) {\n        // setting the progress value by calculating with file length and index\n        setProgress(`${(i / files.length * 100).toFixed()}`);\n        // setting completed files\n        setcompletedFiles(i);\n        const file = files[i];\n        try {\n          const data = await readFileAsync(file);\n          const workbook = XLSX.read(data, {\n            type: 'binary',\n            cellDates: true,\n            dateNF: 'YYYY-MM-DD'\n          });\n          // Assuming you want to convert the first sheet to JSON\n          const sheetName = workbook.SheetNames;\n          // looping the sheets in the single sheet so that we can get only TOTAL sheet data\n          await sheetName.forEach(async sheetName => {\n            if (sheetName === \"TOTAL\") {\n              const sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n                // raw: false, // Interpret dates as JavaScript dates\n                // dateNF: 'dd-mmm-yyyy' // Format for parsing dates (adjust as needed)\n              });\n              const data1 = [];\n              const startDateOld = new Date(moment(fromDate).format('yyyy-MM-DD')); // October 1, 2023\n              const endDate = new Date(moment(toDate).format('yyyy-MM-DD'));\n              const oneDayMilliseconds = 24 * 60 * 60 * 1000; // 24 hours * 60 minutes * 60 seconds * 1000 milliseconds\n              const startDate = new Date(startDateOld - oneDayMilliseconds);\n              await sheetData.map(async val => {\n                if (val !== null && val !== void 0 && val.Date && (val === null || val === void 0 ? void 0 : val.Date) !== \"Total\" && val[\" Adjusted Billable Spend \"] && val[\" Adjusted Profit \"]) {\n                  console.log(\"sheetData==>\", (val === null || val === void 0 ? void 0 : val.Date) + oneDayMilliseconds);\n                  const itemDateParts = val === null || val === void 0 ? void 0 : val.Date.split('-');\n                  const itemYear = new Date(fromDate).getFullYear();\n                  const itemMonth = itemDateParts[1].toLowerCase(); // Convert to lowercase for consistency\n                  const itemDay = parseInt(itemDateParts[0]);\n                  const itemJavaScriptDate = new Date(`${itemYear}-${itemMonth}-${itemDay}`);\n                  // console.log(\"itemJavaScriptDate\", itemJavaScriptDate, startDate);\n                  // console.log(\"itemJavaScriptDate\", itemYear, itemDateParts, `2023-${itemMonth}-${itemDay}`);\n                  if (itemJavaScriptDate >= startDate && itemJavaScriptDate <= endDate) {\n                    console.log(\"itemJavaScriptDate\", moment(new Date(val === null || val === void 0 ? void 0 : val.Date)).format(\"DD-MMM\"));\n                    const finelData = {\n                      \"Spend Sheet Name\": file === null || file === void 0 ? void 0 : file.name,\n                      \"Date\": moment(new Date(val === null || val === void 0 ? void 0 : val.Date)).format(\"DD-MMM\"),\n                      \"Adjusted Billable Spend\": val[\" Adjusted Billable Spend \"],\n                      \"Adjusted Profit\": val[\" Adjusted Profit \"]\n                    };\n                    // console.log(\"sasasasas\", finelData);\n                    data1.push(finelData);\n                    // return finelData\n                  }\n                }\n              });\n\n              // nremoving the undetined data from data1 array\n              const newData = await data1.filter(item => {\n                if (item !== undefined) {\n                  return item;\n                }\n              });\n              // pushing the converd data to data1 array\n              convertedDataArray.push(data1);\n            }\n          });\n        } catch (error) {\n          console.error(`Error converting Excel file ${file === null || file === void 0 ? void 0 : file.name} to JSON:`, error);\n        }\n      }\n      // Set the array of converted JSON data in state\n      setExcelData([].concat(...convertedDataArray));\n      setShowExportButton(true);\n    }\n  };\n  const readFileAsync = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        resolve(event.target.result);\n      };\n      reader.onerror = event => {\n        reject(event.target.error);\n      };\n      reader.readAsBinaryString(file);\n    });\n  };\n\n  // converting json to excel\n  const handleExportExcel = () => {\n    const worksheet = XLSX.utils.json_to_sheet(excelData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n    XLSX.writeFile(workbook, \"DataSheet.xlsx\", {\n      type: 'binary',\n      bookType: 'xlsx',\n      cellDates: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"datePickerView\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fromData\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"From Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            className: \"datePicker\",\n            selected: fromDate,\n            onChange: date => setFromDate(date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toDate\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"To Date \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            className: \"datePicker\",\n            selected: toDate,\n            onChange: date => setToDate(date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Click box to upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: upload,\n          alt: \"upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"excelFileInput\",\n          accept: \".xlsx, .xls\" // Specify accepted file types (Excel formats)\n          ,\n          multiple: true // Allow multiple file selection\n          ,\n          onChange: handleFileSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), excelData.length > 1 && showExportButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"exportButton\",\n        onClick: handleExportExcel,\n        title: \"Export\",\n        children: \"Export\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 54\n      }, this), showExportButton && excelData.length <= 1 && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"No Data found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), completedFiles && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progressView\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: `Total files processed ${completedFiles}/${totalFiles}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Progress, {\n          progress: progress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LtNFgcm4AQr3tT+U535PksjByBM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DatePicker","XLSX","moment","upload","Progress","jsxDEV","_jsxDEV","App","_s","fromDate","setFromDate","Date","toDate","setToDate","excelData","setExcelData","progress","setProgress","showExportButton","setShowExportButton","showLoader","setShowLoader","completedFiles","setcompletedFiles","totalFiles","setTotalFiles","handleFileSelect","e","files","target","length","convertedDataArray","i","toFixed","file","data","readFileAsync","workbook","read","type","cellDates","dateNF","sheetName","SheetNames","forEach","sheetData","utils","sheet_to_json","Sheets","data1","startDateOld","format","endDate","oneDayMilliseconds","startDate","map","val","console","log","itemDateParts","split","itemYear","getFullYear","itemMonth","toLowerCase","itemDay","parseInt","itemJavaScriptDate","finelData","name","push","newData","filter","item","undefined","error","concat","Promise","resolve","reject","reader","FileReader","onload","event","result","onerror","readAsBinaryString","handleExportExcel","worksheet","json_to_sheet","book_new","book_append_sheet","writeFile","bookType","className","children","fileName","_jsxFileName","lineNumber","columnNumber","selected","onChange","date","src","alt","id","accept","multiple","onClick","title","_c","$RefreshReg$"],"sources":["/Users/mahammadsuelc/Desktop/automation/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './App.css'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as XLSX from 'xlsx'\nimport moment from \"moment/moment\";\nimport upload from './Assets/upload.png'\nimport { Progress } from \"./components/ProgressBar/Progress\";\n\nconst App = () => {\n  const [fromDate, setFromDate] = useState(new Date());\n  const [toDate, setToDate] = useState(new Date());\n  const [excelData, setExcelData] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [showExportButton, setShowExportButton] = useState(false)\n  const [showLoader, setShowLoader] = useState(false)\n  const [completedFiles, setcompletedFiles] = useState(null)\n  const [totalFiles, setTotalFiles] = useState(0)\n\n\n  const handleFileSelect = async (e) => {\n    const files = e.target.files;\n    // setting selected file length\n    setTotalFiles(files.length)\n    // checking if seleted files exist or the selected file length should be greater then 0\n    if (files && files.length > 0) {\n      // setting export button false becouse after completion of process only the button should show\n      setShowExportButton(false)\n      // taking empaty arry to push the converted files\n      const convertedDataArray = [];\n      // looping the selcted files\n      for (let i = 0; i <= files.length; i++) {\n        // setting the progress value by calculating with file length and index\n        setProgress(`${((i / files.length) * 100).toFixed()}`)\n        // setting completed files\n        setcompletedFiles(i)\n\n        const file = files[i];\n        try {\n          const data = await readFileAsync(file);\n          const workbook = XLSX.read(data, { type: 'binary', cellDates:true, dateNF:'YYYY-MM-DD'});\n          // Assuming you want to convert the first sheet to JSON\n          const sheetName = workbook.SheetNames;\n          // looping the sheets in the single sheet so that we can get only TOTAL sheet data\n          await sheetName.forEach(async (sheetName) => {\n            if (sheetName === \"TOTAL\") {\n              const sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n                // raw: false, // Interpret dates as JavaScript dates\n                // dateNF: 'dd-mmm-yyyy' // Format for parsing dates (adjust as needed)\n              });\n              const data1 = []\n              const startDateOld = new Date(moment(fromDate).format('yyyy-MM-DD')); // October 1, 2023\n              const endDate = new Date(moment(toDate).format('yyyy-MM-DD'));\n\n              const oneDayMilliseconds = 24 * 60 * 60 * 1000; // 24 hours * 60 minutes * 60 seconds * 1000 milliseconds\n              const startDate = new Date(startDateOld - oneDayMilliseconds);\n\n              await sheetData.map(async (val) => {\n                if (val?.Date && val?.Date !== \"Total\" && val[\" Adjusted Billable Spend \"] && val[\" Adjusted Profit \"]) {\n                  console.log(\"sheetData==>\", val?.Date + oneDayMilliseconds);\n                  const itemDateParts = val?.Date.split('-');\n                  const itemYear = new Date(fromDate).getFullYear()\n                  const itemMonth = itemDateParts[1].toLowerCase(); // Convert to lowercase for consistency\n                  const itemDay = parseInt(itemDateParts[0]);\n\n                  const itemJavaScriptDate = new Date(`${itemYear}-${itemMonth}-${itemDay}`);\n                  // console.log(\"itemJavaScriptDate\", itemJavaScriptDate, startDate);\n                  // console.log(\"itemJavaScriptDate\", itemYear, itemDateParts, `2023-${itemMonth}-${itemDay}`);\n                  if (itemJavaScriptDate >= startDate && itemJavaScriptDate <= endDate) {\n                    console.log(\"itemJavaScriptDate\", moment(new Date(val?.Date)).format(\"DD-MMM\"));\n                    const finelData = {\n                      \"Spend Sheet Name\": file?.name,\n                      \"Date\": moment(new Date(val?.Date)).format(\"DD-MMM\"),\n                      \"Adjusted Billable Spend\": val[\" Adjusted Billable Spend \"],\n                      \"Adjusted Profit\": val[\" Adjusted Profit \"]\n                    }\n                    // console.log(\"sasasasas\", finelData);\n                    data1.push(finelData)\n                    // return finelData\n                  }\n                }\n              })\n\n              // nremoving the undetined data from data1 array\n              const newData = await data1.filter((item) => {\n                if (item !== undefined) {\n                  return item\n                }\n              })\n              // pushing the converd data to data1 array\n              convertedDataArray.push(data1);\n            }\n          })\n        } catch (error) {\n          console.error(`Error converting Excel file ${file?.name} to JSON:`, error);\n        }\n      }\n      // Set the array of converted JSON data in state\n      setExcelData([].concat(...convertedDataArray));\n      setShowExportButton(true)\n    }\n  };\n\n\n  const readFileAsync = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = (event) => {\n        resolve(event.target.result);\n      };\n\n      reader.onerror = (event) => {\n        reject(event.target.error);\n      };\n\n      reader.readAsBinaryString(file);\n    });\n  };\n\n  // converting json to excel\n  const handleExportExcel = () => {\n    const worksheet = XLSX.utils.json_to_sheet(excelData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n    XLSX.writeFile(workbook, \"DataSheet.xlsx\", { type: 'binary', bookType: 'xlsx', cellDates: true });\n  }\n\n  return (\n    <div className=\"mainContainer\">\n      <div className='container'>\n        <div className='datePickerView'>\n          <div className=\"fromData\">\n            <h3>From Date</h3>\n            <DatePicker className=\"datePicker\" selected={fromDate} onChange={(date) => setFromDate(date)} />\n          </div>\n\n          <div className=\"toDate\">\n            <h3>To Date </h3>\n            <DatePicker className=\"datePicker\" selected={toDate} onChange={(date) => setToDate(date)} />\n          </div>\n        </div>\n\n        <div className=\"file-upload\">\n          <h2>Click box to upload</h2>\n          <img src={upload} alt=\"upload\" />\n          <input\n            type=\"file\"\n            id=\"excelFileInput\"\n            accept=\".xlsx, .xls\" // Specify accepted file types (Excel formats)\n            multiple // Allow multiple file selection\n            onChange={handleFileSelect}\n          />\n        </div>\n\n        {excelData.length > 1 && showExportButton && <button\n          className=\"exportButton\"\n          onClick={handleExportExcel}\n          title=\"Export\"\n        >\n          Export\n        </button>\n        }\n\n        {showExportButton && excelData.length <= 1 &&\n          <h3>\n            No Data found\n          </h3>\n        }\n        {completedFiles &&\n          <div className=\"progressView\">\n            <h3>\n              {`Total files processed ${completedFiles}/${totalFiles}`}\n            </h3>\n            <Progress\n              progress={progress}\n            />\n          </div>}\n      </div>\n    </div>\n  )\n}\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}